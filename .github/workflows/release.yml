name: release

on:
  milestone:
    types: [ closed ]
  workflow_dispatch:
    inputs:
      milestoneId:
        description: 'Milestone ID'
        required: true
        default: '1'

jobs:
  create-release:
    name: create release
    runs-on: ubuntu-22.04
    outputs:
      notes: ${{ steps.cat-notes-md.outputs.notes_markdown }}
    steps:
      - uses: actions/checkout@master

      - name: generate notes
        uses: docker://decathlon/release-notes-generator-action:2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OUTPUT_FOLDER: temp_release_notes
          USE_MILESTONE_TITLE: "true"
          FILENAME: notes.md

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let notes = fs.readFileSync('temp_release_notes/notes.md', 'utf8').toString();
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ inputs.milestoneId }}`,
              name: `v${{ inputs.milestoneId }}`,
              body: notes,
              draft: true,
              prerelease: false
            })
            return data.id
  

  build:
    name: build application
    permissions:
      contents: write
    runs-on: windows-latest
    needs: [ create-release ]
    steps:
      - uses: actions/checkout@v3

      - name: cargo cache
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-cargo

      - name: cargo target/ cache
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-cargo-target

      - name: ui/node_modules/ cache
        uses: actions/cache@v1
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/ui/package.json') }}-${{ hashFiles('**/ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ hashFiles('**/ui/package.json') }}
            ${{ runner.os }}-node-modules

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install frontend dependencies
        run: cd ui && npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          includeDebug: false
          includeRelease: true
          releaseId: ${{ inputs.milestoneId }}